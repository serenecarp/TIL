
import java.net.*;
import java.io.*;

public class SEOUL08_PARKSUNGJUN {

	// 닉네임을 사용자에 맞게 변경해 주세요.
	static final String NICKNAME = "SEOUL08_PARKSUNGJUN";

	// 일타싸피 프로그램을 로컬에서 실행할 경우 변경하지 않습니다.
	static final String HOST = "127.0.0.1";

	// 일타싸피 프로그램과 통신할 때 사용하는 코드값으로 변경하지 않습니다.
	static final int PORT = 1447;
	static final int CODE_SEND = 9901;
	static final int CODE_REQUEST = 9902;
	static final int SIGNAL_ORDER = 9908;
	static final int SIGNAL_CLOSE = 9909;

	// 게임 환경에 대한 상수입니다.
	static final int TABLE_WIDTH = 254;
	static final int TABLE_HEIGHT = 127;
	static final int NUMBER_OF_BALLS = 6;
	static final int[][] HOLES = { { 0, 0 }, { 127, 0 }, { 254, 0 }, { 0, 127 }, { 127, 127 }, { 254, 127 } };

	public static void main(String[] args) {

		Socket socket = null;
		String recv_data = null;
		byte[] bytes = new byte[1024];
		float[][] balls = new float[NUMBER_OF_BALLS][2];
		int order = 0;

		try {
			socket = new Socket();
			System.out.println("Trying Connect: " + HOST + ":" + PORT);
			socket.connect(new InetSocketAddress(HOST, PORT));
			System.out.println("Connected: " + HOST + ":" + PORT);

			InputStream is = socket.getInputStream();
			OutputStream os = socket.getOutputStream();

			String send_data = CODE_SEND + "/" + NICKNAME + "/";
			bytes = send_data.getBytes("UTF-8");
			os.write(bytes);
			os.flush();
			System.out.println("Ready to play!\n--------------------");

			while (socket != null) {

				// Receive Data
				bytes = new byte[1024];
				int count_byte = is.read(bytes);
				recv_data = new String(bytes, 0, count_byte, "UTF-8");
				System.out.println("Data Received: " + recv_data);

				// Read Game Data
				String[] split_data = recv_data.split("/");
				int idx = 0;
				try {
					for (int i = 0; i < NUMBER_OF_BALLS; i++) {
						for (int j = 0; j < 2; j++) {
							balls[i][j] = Float.parseFloat(split_data[idx++]);
						}
					}
				} catch (Exception e) {
					bytes = (CODE_REQUEST + "/" + CODE_REQUEST).getBytes("UTF-8");
					os.write(bytes);
					os.flush();
					System.out.println("Received Data has been currupted, Resend Requested.");
					continue;
				}

				// Check Signal for Player Order or Close Connection
				if (balls[0][0] == SIGNAL_ORDER) {
					order = (int) balls[0][1];
					System.out.println("\n* You will be the " + (order == 1 ? "first" : "second") + " player. *\n");
					continue;
				} else if (balls[0][0] == SIGNAL_CLOSE) {
					break;
				}

				// Show Balls' Position
				for (int i = 0; i < NUMBER_OF_BALLS; i++) {
					System.out.println("Ball " + i + ": " + balls[i][0] + ", " + balls[i][1]);
				}

				float angle = 0.0f;
				float power = 0.0f;

				//////////////////////////////
				// 이 위는 일타싸피와 통신하여 데이터를 주고 받기 위해 작성된 부분이므로 수정하면 안됩니다.
				//
				// 모든 수신값은 변수, 배열에서 확인할 수 있습니다.
				// - order: 1인 경우 선공, 2인 경우 후공을 의미
				// - balls[][]: 일타싸피 정보를 수신해서 각 공의 좌표를 배열로 저장
				// 예) balls[0][0]: 흰 공의 X좌표
				// balls[0][1]: 흰 공의 Y좌표
				// balls[1][0]: 1번 공의 X좌표
				// balls[4][0]: 4번 공의 X좌표
				// balls[5][0]: 마지막 번호(8번) 공의 X좌표

				// 여기서부터 코드를 작성하세요.
				// 아래에 있는 것은 샘플로 작성된 코드이므로 자유롭게 변경할 수 있습니다.

				int now = 1;
				float dia = 5.73f;

				// whiteBall_x, whiteBall_y: 흰 공의 X, Y좌표를 나타내기 위해 사용한 변수
				float whiteBall_x = balls[0][0];
				float whiteBall_y = balls[0][1];

				for (int i = 1; i < balls.length; i++) {
					if (balls[i][0] != -1) {
						now = i;
						break;
					}
				}
				// targetBall_x, targetBall_y: 목적구의 X, Y좌표를 나타내기 위해 사용한 변수
				float targetBall_x = balls[now][0];
				float targetBall_y = balls[now][1];

				// 가장 가까운 홀을 구하고 그 곳으로 넣도록 유도
				double minHoleDist = Integer.MAX_VALUE;
				int minHoleIdx = 0;
				double holeDist = 0;

				for (int i = 0; i < HOLES.length; i++) {

					holeDist = getDistance(targetBall_x, targetBall_y, HOLES[i][0], HOLES[i][1]);
					// 가장 가까운 홀의 인덱스 구하기
					if (minHoleDist > holeDist) {
						minHoleDist = holeDist;
						minHoleIdx = i;
					}
				}

				// 흰공~홀 거리, (가)
				float WtoH = getDistance(whiteBall_x, whiteBall_y, HOLES[minHoleIdx][0], HOLES[minHoleIdx][1]);
				// 목표공~홀 거리, (나)
				float TtoH = getDistance(whiteBall_x, whiteBall_y, HOLES[minHoleIdx][0], HOLES[minHoleIdx][1]);
				// 흰공~목표공 거리, (다)
				float WtoT = getDistance(whiteBall_x, whiteBall_y, targetBall_x, targetBall_y);

				// 흰공~홀~목표공 각도
//				float a = (float) getAngle(whiteBall_x, whiteBall_y, targetBall_x, targetBall_y);
				float a = (float) Math.acos((WtoH * WtoH + TtoH * TtoH - WtoT * WtoT) / (2 * WtoT * TtoH));
				// 흰공~수직~홀 각도
				float b = (float) Math.atan(
						Math.abs(HOLES[minHoleIdx][0] - whiteBall_x) / Math.abs(HOLES[minHoleIdx][1] - whiteBall_y));
				// 진짜 목표하는 거리
				float real_d = (float) Math
						.sqrt(WtoH * WtoH + (TtoH + dia) * (TtoH + dia) - (2 * WtoH * (TtoH + dia) * Math.cos(a)));
				// 홀~흰공~진짜 목표 각도
				float c = (float) (Math
						.acos((WtoH * WtoH + real_d * real_d - (TtoH + dia) * (TtoH + dia)) / (2 * WtoH * real_d)));

				// 일단 그냥 목표공을 직선으로 치는 걸 목표료 함
				// 무작정 세게
//				angle = getAngle(whiteBall_x, whiteBall_y, targetBall_x, targetBall_y);
//				angle = getAngle(WtoH, )
				angle = (float) (Math.toDegrees(b) + Math.toDegrees(c));
				power = 100;

//				angle = b + c;
//				power = real_d;
				System.out.println("목표 홀: " + minHoleIdx);
				System.out.println("a각: " + a + "\nb각: " + b + "\nc각: " + c);
				System.out.println("각도: " + angle);
				System.out.println("거리: " + real_d);

				// 주어진 데이터(공의 좌표)를 활용하여 두 개의 값을 최종 결정하고 나면,
				// 나머지 코드에서 일타싸피로 값을 보내 자동으로 플레이를 진행하게 합니다.
				// - angle: 흰 공을 때려서 보낼 방향(각도)
				// - power: 흰 공을 때릴 힘의 세기
				//
				// 이 때 주의할 점은 power는 100을 초과할 수 없으며,
				// power = 0인 경우 힘이 제로(0)이므로 아무런 반응이 나타나지 않습니다.
				//
				// 아래는 일타싸피와 통신하는 나머지 부분이므로 수정하면 안됩니다.
				//////////////////////////////

				String merged_data = angle + "/" + power + "/";
				bytes = merged_data.getBytes("UTF-8");
				os.write(bytes);
				os.flush();
				System.out.println("Data Sent: " + merged_data);
			}

			os.close();
			is.close();
			socket.close();
			System.out.println("Connection Closed.\n--------------------");
		} catch (Exception e) {
			e.printStackTrace();
		}
	}

	static float getDistance(float my_x, float my_y, float target_x, float target_y) {
		float width = Math.abs(my_x - target_x);
		float height = Math.abs(my_y - target_y);
		return (float) Math.sqrt((width * width) + (height * height));

	}

	static double getAngle(float my_x, float my_y, float target_x, float target_y) {
		float width = Math.abs(my_x - target_x);
		float height = Math.abs(my_y - target_y);

		double radian = height > 0 ? Math.atan(width / height) : 0;
		float angle = (float) ((180.0 / Math.PI) * radian);

		if (my_x == target_x) {
			if (my_y < target_y) {
				angle = 0;
			} else {
				angle = 180;
			}
		} else if (my_y == target_y) {
			if (my_x < target_x) {
				angle = 90;
			} else {
				angle = 270;
			}
		}

		// 우측하단
		if (my_x > target_x && my_y > target_y) {
			radian = Math.atan(width / height);
			angle = (float) (((180.0 / Math.PI) * radian) + 180);
		}
		// 2사분면
		else if (my_x < target_x && my_y > target_y) {
			radian = Math.atan(height / width);
			angle = (float) (((180.0 / Math.PI) * radian) + 90);
		}

		// 목적구가 흰 공을 중심으로 4사분면에 위치했을 때 각도를 재계산
		else if (my_x > target_x && my_y < target_y) {
			radian = Math.atan(height / width);
			angle = (float) (((180.0 / Math.PI) * radian) + 270);
		}
		return angle;

	}

	static double getRadian(float my_x, float my_y, float target_x, float target_y) {
		float width = Math.abs(my_x - target_x);
		float height = Math.abs(my_y - target_y);
		double radian = height > 0 ? Math.atan(width / height) : 0;
		return radian;
	}

}
